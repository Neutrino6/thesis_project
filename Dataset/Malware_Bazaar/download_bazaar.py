#!/usr/bin/env python3

import os
import sys
import argparse
import requests
import pyzipper
import csv
from tqdm import tqdm
from io import BytesIO

API_URL = "https://mb-api.abuse.ch/api/v1/"
ZIP_PASSWORD = b'infected'
DEFAULT_DIR = "Malware_bazaar"
LOG_FILENAME = "log.csv"

def fetch_tagged_samples(api_key, tag, limit):
    headers = {'API-KEY': api_key}
    response = requests.post(API_URL, data={"query": "get_taginfo", "tag": tag}, headers=headers)
    data = response.json()
    if data.get("query_status") != "ok":
        print("[!] Errore nella risposta API:", data.get("query_status"))
        sys.exit(1)
    return data.get("data", [])[:limit]

def download_and_extract_sample(api_key, sha256_hash, output_dir, unzip=False):
    headers = {'API-KEY': api_key}
    data = {"query": "get_file", "sha256_hash": sha256_hash}
    response = requests.post(API_URL, data=data, headers=headers)

    if b"file_not_found" in response.content:
        return "non trovato", None

    zip_path = os.path.join(output_dir, f"{sha256_hash}.zip")
    with open(zip_path, "wb") as f:
        f.write(response.content)

    if unzip:
        try:
            with pyzipper.AESZipFile(zip_path) as zf:
                zf.pwd = ZIP_PASSWORD
                zf.extractall(path=output_dir)
                names = zf.namelist()
                return "estratto", ", ".join(names)
        except Exception as e:
            return f"errore estrazione: {e}", None

    return "scaricato", None

def main():
    parser = argparse.ArgumentParser(description='Scarica file malware JS da MalwareBazaar via tag')
    parser.add_argument('--tag', required=True, help='Tag da cercare (es. js)')
    parser.add_argument('--limit', type=int, default=10, help='Numero massimo di file da scaricare')
    parser.add_argument('--unzip', action='store_true', help='Estrai automaticamente i file')
    parser.add_argument('--apikey', required=True, help='API Key di MalwareBazaar')
    parser.add_argument('--outdir', default=DEFAULT_DIR, help='Cartella di destinazione')
    args = parser.parse_args()

    os.makedirs(args.outdir, exist_ok=True)
    log_path = os.path.join(args.outdir, LOG_FILENAME)

    print(f"[*] Recupero dei file con tag '{args.tag}' (limite: {args.limit})...")
    samples = fetch_tagged_samples(args.apikey, args.tag, args.limit)

    with open(log_path, mode='w', newline='') as logfile:
        logwriter = csv.writer(logfile)
        logwriter.writerow(['sha256', 'file(s)', 'status'])

        for entry in tqdm(samples, desc="Download"):
            sha256 = entry.get("sha256_hash")
            if sha256:
                status, filenames = download_and_extract_sample(args.apikey, sha256, args.outdir, unzip=args.unzip)
                logwriter.writerow([sha256, filenames or "-", status])

    print(f"\nâœ… Operazione completata. File salvati in: {args.outdir}")
    print(f"ðŸ“„ Log disponibile in: {log_path}")

if __name__ == "__main__":
    main()

